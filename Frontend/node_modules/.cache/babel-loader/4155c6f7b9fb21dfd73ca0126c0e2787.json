{"ast":null,"code":"var _jsxFileName = \"/Users/jugal/Documents/Root/University/Web Dev CS 5610/Project/Front-end/wbdv-sp20-flight-project-client-react/src/components/Others/AutocompleteComponent.js\";\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass AutocompleteComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = e => {\n      const {\n        suggestions\n      } = this.props;\n      const userInput = e.currentTarget.value;\n      var suggestionsdata = [];\n\n      if (userInput != \"\") {\n        this.setState({\n          userInput: userInput\n        });\n        this.props.onDataChange(userInput);\n        fetch('http://localhost:3001/api/search/airport/code/' + e.currentTarget.value).then(response => {\n          return response.json();\n        }).then(data => {\n          suggestionsdata = data; // Filter our suggestions that don't contain the user's input\n\n          const filteredSuggestions = suggestionsdata.filter(suggestion => suggestion.detailedName.toLowerCase().indexOf(userInput.toLowerCase()) > -1); // Update the user input and filtered suggestions, reset the active\n          // suggestion and make sure the suggestions are shown\n\n          this.setState({\n            activeSuggestion: 0,\n            filteredSuggestions: filteredSuggestions,\n            showSuggestions: true\n          });\n        });\n      } else {\n        this.setState({\n          activeSuggestion: 0,\n          filteredSuggestions: [],\n          showSuggestions: true,\n          userInput: userInput\n        });\n        this.props.onDataChange(\"null\");\n      }\n    };\n\n    this.onClick = e => {\n      // Update the user input and reset the rest of the state\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n      this.props.onDataChange(e.currentTarget.innerText);\n    };\n\n    this.onKeyDown = e => {\n      const {\n        activeSuggestion,\n        filteredSuggestions\n      } = this.state; // User pressed the enter key, update the input and close the\n      // suggestions\n\n      if (e.keyCode === 13) {\n        this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });\n      } // User pressed the up arrow, decrement the index\n      else if (e.keyCode === 38) {\n          if (activeSuggestion === 0) {\n            return;\n          }\n\n          this.setState({\n            activeSuggestion: activeSuggestion - 1\n          });\n        } // User pressed the down arrow, increment the index\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n              return;\n            }\n\n            this.setState({\n              activeSuggestion: activeSuggestion + 1\n            });\n          }\n    };\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n  } // Event fired when the input value is changed\n\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = React.createElement(\"ul\", {\n          className: \"list-group suggestions overlap\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, filteredSuggestions.map((suggestion, index) => {\n          let className = [\"list-group-item\"]; // Flag the active suggestion with a class\n\n          if (index === activeSuggestion) {\n            className.push(\"active\");\n          }\n\n          return React.createElement(\"li\", {\n            className: className.join(' '),\n            onClick: onClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148\n            },\n            __self: this\n          }, suggestion.name, \" - \", suggestion.iataCode);\n        }));\n      } else {\n        suggestionsListComponent = React.createElement(\"div\", {\n          className: \"no-suggestions\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, React.createElement(\"em\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, \"No suggestions!\"));\n      }\n    }\n\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: onChange,\n      onKeyDown: onKeyDown,\n      value: userInput,\n      className: \"form-control\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), suggestionsListComponent);\n  }\n\n}\n\nAutocompleteComponent.propTypes = {\n  suggestions: PropTypes.instanceOf(Array)\n};\nAutocompleteComponent.defaultProps = {\n  suggestions: []\n};\nexport default AutocompleteComponent;","map":{"version":3,"sources":["/Users/jugal/Documents/Root/University/Web Dev CS 5610/Project/Front-end/wbdv-sp20-flight-project-client-react/src/components/Others/AutocompleteComponent.js"],"names":["React","Component","Fragment","PropTypes","AutocompleteComponent","constructor","props","onChange","e","suggestions","userInput","currentTarget","value","suggestionsdata","setState","onDataChange","fetch","then","response","json","data","filteredSuggestions","filter","suggestion","detailedName","toLowerCase","indexOf","activeSuggestion","showSuggestions","onClick","innerText","onKeyDown","state","keyCode","length","render","suggestionsListComponent","map","index","className","push","join","name","iataCode","propTypes","instanceOf","Array","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass AutocompleteComponent extends Component {\n  static propTypes = {\n    suggestions: PropTypes.instanceOf(Array)\n  };\n\n  static defaultProps = {\n    suggestions: []\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n  }\n\n  // Event fired when the input value is changed\n  onChange = e => {\n    const {suggestions} = this.props;\n    const userInput = e.currentTarget.value;\n    var suggestionsdata = [];\n\n    if (userInput != \"\") {\n      this.setState({\n        userInput: userInput\n      });\n\n      this.props.onDataChange(userInput);\n\n      fetch(\n          'http://localhost:3001/api/search/airport/code/'\n          + e.currentTarget.value)\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        suggestionsdata = data;\n        // Filter our suggestions that don't contain the user's input\n        const filteredSuggestions = suggestionsdata.filter(\n            suggestion =>\n                suggestion.detailedName.toLowerCase().indexOf(\n                    userInput.toLowerCase()) > -1\n        );\n        // Update the user input and filtered suggestions, reset the active\n        // suggestion and make sure the suggestions are shown\n        this.setState({\n          activeSuggestion: 0,\n          filteredSuggestions: filteredSuggestions,\n          showSuggestions: true\n        });\n      });\n    } else {\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: true,\n        userInput: userInput\n      });\n\n      this.props.onDataChange(\"null\");\n    }\n\n  };\n\n  // Event fired when the user clicks on a suggestion\n  onClick = e => {\n    // Update the user input and reset the rest of the state\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: e.currentTarget.innerText\n    });\n\n    this.props.onDataChange(e.currentTarget.innerText);\n  };\n\n  // Event fired when the user presses a key down\n  onKeyDown = e => {\n    const {activeSuggestion, filteredSuggestions} = this.state;\n\n    // User pressed the enter key, update the input and close the\n    // suggestions\n    if (e.keyCode === 13) {\n      this.setState({\n        activeSuggestion: 0,\n        showSuggestions: false,\n        userInput: filteredSuggestions[activeSuggestion]\n      });\n    }\n    // User pressed the up arrow, decrement the index\n    else if (e.keyCode === 38) {\n      if (activeSuggestion === 0) {\n        return;\n      }\n\n      this.setState({activeSuggestion: activeSuggestion - 1});\n    }\n    // User pressed the down arrow, increment the index\n    else if (e.keyCode === 40) {\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\n        return;\n      }\n\n      this.setState({activeSuggestion: activeSuggestion + 1});\n    }\n  };\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = (\n            <ul className=\"list-group suggestions overlap\">\n              {filteredSuggestions.map((suggestion, index) => {\n                let className = [\"list-group-item\"];\n\n                // Flag the active suggestion with a class\n                if (index === activeSuggestion) {\n                  className.push(\"active\");\n                }\n\n                return (\n                    <li\n                        className={className.join(' ')}\n                        onClick={onClick}\n                    >\n                      {suggestion.name} - {suggestion.iataCode}\n                    </li>\n                );\n              })}\n            </ul>\n        );\n      } else {\n        suggestionsListComponent = (\n            <div className=\"no-suggestions\">\n              <em>No suggestions!</em>\n            </div>\n        );\n      }\n    }\n\n    return (\n        <Fragment>\n          <input\n              type=\"text\"\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              value={userInput}\n              className=\"form-control\"\n              required\n          />\n          {suggestionsListComponent}\n        </Fragment>\n    );\n  }\n}\n\nexport default AutocompleteComponent;\n"]},"metadata":{},"sourceType":"module"}